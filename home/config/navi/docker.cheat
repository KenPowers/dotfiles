% Docker

# Run new container and bind a port
docker run -p <host_port>:<container_port> <image>

# Run new container and mount current working directory
docker run -it --rm -v $(pwd):/host -w /host <image>

# Stop all containers and prune everything from Docker
docker stop $(docker ps -aq); docker system prune --all --volumes

# Stop all containers and prune stopped containers from Docker
docker stop $(docker ps -aq); docker container prune

# Prune all stopped containers from Docker
docker container prune

# Prune all Volumes
docker system prune --volumes

# Backup docker volume
docker run --rm \
  -v "<volume>":/backup-volume \
  -v "$(pwd)":/backup \
  busybox \
  tar -czvf /backup/<backup-name>.tar.gz /backup-volume


$ backup-name: echo -e "my-backup\n"

# Restore docker volume
docker run --rm \
  -v "<volume>":/backup-volume \
  -v "$(pwd)":/backup \
  busybox \
  tar -xzvf /backup/<backup-file> /backup-volume -C

$ backup-file: fd . -e tar.gz
$ volume: docker volume ls -q

# Save a Docker Image as a Tar File
docker save <image> -o <image>.tar

# Start Docker Compose
docker-compose up -d

# Start Specific Docker Compose Service
docker-compose start <service>

# Stop Docker Compose
docker-compose down

# Stop Specific Docker Compose Service
docker-compose stop <service>

# Restart Docker Compose
docker-compose restart

# Restart specific Docker Compose service
docker-compose restart <service>

# Run a one-off command on a Docker Compose service
docker-compose run --rm <service> <command>

# Run a one-off command on a Docker Compose service and mount current working directory
docker-compose run --rm -v $(pwd):/host -w /host <service> <command>

# Execute a command in a running Docker Compose service
docker-compose exec <service> <command>

$ service: docker-compose config --services
$ image: echo -e 'busybox\n'
